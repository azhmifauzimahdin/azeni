// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id            String        @id @default(uuid())
  userId        String
  groom         String
  bride         String
  slug          String
  themeId       String?
  musicId       String?
  image         String?
  status        Boolean       @default(true)
  date          DateTime      @default(now())
  useScheduleDate Boolean     @default(true)
  isTemplate    Boolean    @default(false)
  expiresAt     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  transaction   Transaction?  @relation("InvitationTransaction")
  theme         Theme?        @relation("ThemecInvitations", fields: [themeId], references: [id], onDelete: Restrict)
  music         Music?        @relation("MusicInvitations",fields: [musicId], references: [id], onDelete: Restrict)
  quote         Quote?        @relation("InvitationQuote")
  schedules     Schedule[]    @relation("InvitationSchedule")
  liveStream    LiveStream?   @relation("InvitationLiveStream")
  couple        Couple?       @relation("InvitationCouple")
  setting       Setting?      @relation("InvitationSetting")
  stories       Story[]       @relation("InvitationStory")
  galleries     Gallery[]     @relation("InvitationGallery")
  bankaccounts  BankAccount[] @relation("InvitationBankAccount")
  comments      Comment[]     @relation("InvitationComment")
  guests        Guest[]       @relation("InvitationGuest")
  invitationChanges InvitationChange[] @relation("InvitationChange")
}

model Setting {
  id              String        @id @default(cuid())
  invitationId    String        @unique
  invitationEnabled Boolean     @default(true)
  rsvpEnabled     Boolean       @default(true)
  rsvpMaxGuests   Int           @default(1)
  rsvpDeadline    DateTime?   
  rsvpAllowNote   Boolean       @default(true)
  commentEnabled  Boolean       @default(true)
  liveStreamEnabled Boolean     @default(false)
  whatsappMessageTemplate String? @db.Text
  scanResetCountdownSeconds Int? @default(5)
  checkinCheckoutEnabled    Boolean    @default(true)
  coupleIntroductionText    String     @default("Dengan memohon rahmat dan ridha Allah SWT, Kami bermaksud menyelenggarakan acara pernikahan putra-putri kami")
  scheduleIntroductionText  String     @default("Yang Insyaallah akan diselenggarakan pada")
  giftIntroductionText      String     @default("Doa restu Bapak/Ibu/Saudara/i sudah merupakan hadiah terbaik bagi kami. Dan jika memberi adalah ungkapan tanda kasih Anda, Anda dapat memberi kado secara cashless.")
  rsvpIntroductionText      String     @default("Merupakan suatu kebahagiaan dan kehormatan bagi kami, apabila Bapak/Ibu/Saudara/i, berkenan hadir dan memberikan doa restu kepada kami.")
  liveStreamIntroductionText String     @default("Bagi tamu undangan yang berhalangan hadir tetapi ingin menyaksikan acara pernikahan kami silahkan akses live streaming melalui link di bawah:")
  timezone        String        @default("WIB")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  invitation    Invitation      @relation("InvitationSetting",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String        @id @default(uuid())
  orderId         String?       @unique
  invitationId    String?       @unique
  invitationSlug  String?
  groomName       String?
  brideName       String?
  originalAmount  Decimal?      @db.Decimal(10, 2)
  amount          Decimal       @db.Decimal(10, 2)
  referralDiscountAmount Decimal?      @db.Decimal(10, 2)
  referrerRewardAmount   Decimal?      @db.Decimal(10, 2)
  date            DateTime
  statusId        String
  redirectUrl     String?
  midtransPdfUrl  String?
  snapToken       String?
  referralCodeId  String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  invitation      Invitation?    @relation("InvitationTransaction", fields: [invitationId], references: [id], onDelete: SetNull)
  status          PaymentStatus  @relation("PaymentStatusTransaction", fields: [statusId], references: [id], onDelete: Cascade)
  webhookLogs     MidtransWebhookLog[]  @relation("MidtransTransaction")
  referralCode    ReferralCode?  @relation("ReferralTransaction",fields: [referralCodeId], references: [id], onDelete: SetNull)
}

model PaymentStatus {
  id            String        @id @default(uuid())
  name          String        @unique
  transactions  Transaction[] @relation("PaymentStatusTransaction")
}

model MidtransWebhookLog {
  id            String        @id @default(uuid())
  orderId       String
  transactionStatus  String
  paymentType   String
  fraudStatus   String?
  bank          String?
  vaNumber      String?
  store         String?
  paymentCode   String?
  expiredAt     DateTime?
  rawBody       Json
  eventAt       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  transaction   Transaction   @relation("MidtransTransaction",fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Theme{
  id            String        @id @default(uuid())
  name          String
  thumbnail     String
  categoryId    String
  colorTag      String
  originalPrice Decimal       @db.Decimal(10, 2)
  discount      Decimal       @db.Decimal(10, 2)
  isPercent     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  category      ThemeCategory @relation("CategoryThemes", fields: [categoryId], references: [id])
  invitations   Invitation[]  @relation("ThemecInvitations")
  themeLogs     ThemeLog[]    @relation("ThemeLog")
}

model ThemeLog {
  id              String      @id @default(uuid())
  userId          String
  userName        String
  themeId         String
  oldOriginalPrice  Decimal?  @db.Decimal(10, 2)
  newOriginalPrice  Decimal?  @db.Decimal(10, 2)
  oldDiscount     Decimal?    @db.Decimal(10, 2)
  newDiscount     Decimal?    @db.Decimal(10, 2)
  oldIsPercent    Boolean?
  newIsPercent    Boolean?
  changedAt       DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  theme           Theme       @relation("ThemeLog", fields: [themeId], references: [id], onDelete: Cascade)
}

model ThemeCategory {
  id            String        @id @default(uuid())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  themes        Theme[]       @relation("CategoryThemes")
}

model Quote {
  id            String        @id @default(uuid())
  name          String        @db.Text
  author        String
  invitationId  String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationQuote",fields: [invitationId], references: [id], onDelete: Cascade)
}

model InvitationChange {
  id            String         @id @default(uuid())
  invitationId  String         
  type          String 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationChange",fields: [invitationId], references: [id], onDelete: Cascade)

  @@unique([invitationId, type])
}

model QuoteTemplate  {
  id            String        @id @default(uuid())
  name          String        @db.Text
  author        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Schedule {
  id            String        @id @default(uuid())
  invitationId  String
  type          String
  name          String
  startDate     DateTime
  endDate       DateTime
  location      String
  locationMaps  String
  timezone      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationSchedule",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Couple {
  id            String        @id @default(uuid())
  invitationId  String        @unique
  groomName     String
  groomFather   String
  groomMother   String
  groomAddress  String?
  groomImage    String?
  groomInstagram String?
  brideName     String
  brideFather   String
  brideMother   String
  brideAddress  String?
  brideImage    String?
  brideInstagram String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationCouple",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Story {
  id            String        @id @default(uuid())
  invitationId  String
  title         String
  date          DateTime
  description   String        @db.Text
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationStory",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Gallery {
  id            String        @id @default(uuid())
  invitationId  String
  image         String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationGallery",fields: [invitationId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id            String        @id @default(uuid())
  invitationId  String
  bankId        String
  accountNumber String
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationBankAccount",fields: [invitationId], references: [id], onDelete: Cascade)
  bank          Bank          @relation("BankAccount", fields: [bankId], references: [id], onDelete: Cascade)
}

model Bank {
  id            String        @id @default(uuid())
  name          String
  icon          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  bankAccounts         BankAccount[]       @relation("BankAccount")
  referralWithdrawals  ReferralWithdrawal[] @relation("ReferralBank")
}

model Comment {
  id            String        @id @default(uuid())
  invitationId  String
  guestId       String
  message       String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  parentId      String?    
  isReply       Boolean       @default(false)
  replyToName   String?
  parent        Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]     @relation("CommentReplies")

  invitation    Invitation    @relation("InvitationComment", fields: [invitationId], references: [id], onDelete: Cascade)
  guest         Guest         @relation("GuestComment", fields: [guestId], references: [id], onDelete: Cascade)
}


model Guest {
  id            String        @id @default(uuid())
  code          String        @unique
  invitationId  String
  name          String
  group         String?
  address       String?
  color         String
  isAttending   Boolean       @default(false)  
  confirmedAt   DateTime?
  totalGuests   Int           @default(1)
  notes         String?
  isCheckedIn   Boolean      @default(false)
  checkedInAt   DateTime?
  checkedOutAt  DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationGuest",fields: [invitationId], references: [id], onDelete: Cascade)
  comments      Comment[]     @relation("GuestComment")
}

model Music {
  id            String        @id @default(uuid())
  name          String
  src           String
  origin        String
  visibility    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitations  Invitation[]   @relation("MusicInvitations")
}

model ReferralCode {
  id            String        @id @default(uuid())
  userId        String        @unique
  userName      String
  code          String        @unique
  description   String?
  discount      Decimal       @db.Decimal(10, 2)
  isPercent     Boolean
  maxDiscount   Decimal?      @db.Decimal(10, 2)
  referrerReward Decimal      @db.Decimal(10, 2)
  referrerIsPercent Boolean   @default(false)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  transactions  Transaction[] @relation("ReferralTransaction")
  referralCodeLogs ReferralCodeLog[] @relation("ReferralCodeLog")
  withdrawals   ReferralWithdrawal[] @relation("ReferralWithdrawal")
}

model ReferralCodeLog {
  id              String      @id @default(uuid())
  userId          String  
  userName        String
  referralCodeId  String
  oldDiscount     Decimal?    @db.Decimal(10, 2)
  newDiscount     Decimal?    @db.Decimal(10, 2)
  oldIsPercent    Boolean?
  newIsPercent    Boolean?
  oldMaxDiscount  Decimal?    @db.Decimal(10, 2)
  newMaxDiscount  Decimal?    @db.Decimal(10, 2)
  newReferrerReward  Decimal?    @db.Decimal(10, 2)
  oldReferrerReward  Decimal?    @db.Decimal(10, 2)
  oldReferrerIsPercent Boolean?
  newReferrerIsPercent Boolean?
  changedAt       DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  referralCode    ReferralCode @relation("ReferralCodeLog", fields: [referralCodeId], references: [id], onDelete: Cascade)
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model ReferralWithdrawal {
  id                String      @id @default(uuid())
  referralCodeId    String
  amount            Decimal     @db.Decimal(10, 2)
  status            WithdrawalStatus @default(PENDING)
  requestedAt       DateTime    @default(now())
  processedAt       DateTime?
  bankId            String
  accountNumber     String
  name              String
  note              String?
  transferProofUrl  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  referralCode      ReferralCode @relation("ReferralWithdrawal", fields: [referralCodeId], references: [id])
  bank              Bank         @relation("ReferralBank", fields: [bankId], references: [id], onDelete: Cascade)
}

model ReferralConfig {
  id                Int      @id @default(autoincrement())
  userId            String
  description       String
  discount          Int
  referrerReward    Decimal      @db.Decimal(10, 2)
  referrerIsPercent Boolean   @default(false)
  isPercent         Boolean
  maxDiscount       Int
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LiveStream {
  id            String      @id @default(uuid())
  invitationId  String      @unique
  startDate     DateTime
  endDate       DateTime
  urlYoutube    String?
  urlInstagram  String?
  urlFacebook   String?
  urlTiktok     String?
  urlZoom       String?
  urlCustom     String?
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  invitation    Invitation  @relation("InvitationLiveStream", fields: [invitationId], references: [id], onDelete: Cascade)
}

enum ImageTemplateType {
  cover
  bride
  groom
}

model ImageTemplate{
  id            String      @id @default(uuid())
  type          ImageTemplateType
  image         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
