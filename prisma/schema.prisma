// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id            String        @id @default(uuid())
  userId        String
  groom         String
  bride         String
  slug          String        @unique
  themeId       String
  musicId       String
  image         String?
  status        Boolean       @default(true)
  date          DateTime      @default(now())
  expiresAt     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  transaction   Transaction?  @relation("InvitationTransaction")
  theme         Theme         @relation(fields: [themeId], references: [id], onDelete: Restrict)
  music         Music?        @relation("MusicInvitations",fields: [musicId], references: [id])
  quote         Quote?        @relation("InvitationQuote")
  schedules     Schedule[]    @relation("InvitationSchedule")
  couple        Couple?       @relation("InvitationCouple")
  stories       Story[]       @relation("InvitationStory")
  galleries     Gallery[]     @relation("InvitationGallery")
  bankaccounts  BankAccount[] @relation("InvitationBankAccount")
  comments      Comment[]     @relation("InvitationComment")
  guests        Guest[]       @relation("InvitationGuest")
}

model Transaction {
  id            String        @id @default(uuid())
  invitationId  String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  date          DateTime
  statusId      String

  invitation    Invitation    @relation("InvitationTransaction",fields: [invitationId], references: [id], onDelete: Cascade)
  status        PaymentStatus  @relation("PaymentStatusTransaction", fields: [statusId], references: [id], onDelete: Cascade)
}

model PaymentStatus {
  id            String        @id @default(uuid())
  name          String
  transactions  Transaction[] @relation("PaymentStatusTransaction")
}

model Theme{
  id            String        @id @default(uuid())
  name          String
  thumbnail     String
  colorTag      String
  originalPrice Decimal       @db.Decimal(10, 2)
  discount      Decimal       @db.Decimal(10, 2)
  isPercent     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitations   Invitation[]
}

model Quote {
  id            String        @id @default(uuid())
  name          String        @db.Text
  author        String
  invitationId  String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationQuote",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Schedule {
  id            String        @id @default(uuid())
  invitationId  String
  type          String
  name          String
  startDate     DateTime
  endDate       DateTime
  location      String
  location_maps String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationSchedule",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Couple {
  id            String        @id @default(uuid())
  invitationId  String        @unique
  groomName     String
  groomFather   String
  groomMother   String
  groomImage    String
  brideName     String
  brideFather   String
  brideMother   String
  brideImage    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationCouple",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Story {
  id            String        @id @default(uuid())
  invitationId  String
  title         String
  date          DateTime
  description   String        @db.Text
  image         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationStory",fields: [invitationId], references: [id], onDelete: Cascade)
}

model Gallery {
  id            String        @id @default(uuid())
  invitationId  String
  image         String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationGallery",fields: [invitationId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id            String        @id @default(uuid())
  invitationId  String
  bankId        String
  accountNumber String
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationBankAccount",fields: [invitationId], references: [id], onDelete: Cascade)
  bank          Bank          @relation("BankAccount", fields: [bankId], references: [id], onDelete: Cascade)
}

model Bank {
  id            String        @id @default(uuid())
  name          String
  icon          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  bankAccount   BankAccount[] @relation("BankAccount")
}

model Comment{
  id            String        @id @default(uuid())
  invitationId  String
  guestId       String
  message       String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  invitation    Invitation    @relation("InvitationComment",fields: [invitationId], references: [id], onDelete: Cascade)
  guest         Guest         @relation("GuestComment",fields: [guestId], references: [id], onDelete: Cascade)
}

model Guest {
  id            String        @id @default(uuid())
  invitationId  String
  name          String
  address       String
  color         String
  isAttending   Boolean       @default(false)        
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitation    Invitation    @relation("InvitationGuest",fields: [invitationId], references: [id], onDelete: Cascade)
  comments      Comment[]     @relation("GuestComment")
}

model Music {
  id            String        @id @default(uuid())
  name          String
  src           String
  origin        String
  visibility    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invitations  Invitation[]   @relation("MusicInvitations")
}